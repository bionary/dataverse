# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

unless defined? OUTPUT_VERBOSITY
  # Output Verbosity 0..3 least..most
  if ENV['OUTPUT_VERBOSITY'].nil?
    OUTPUT_VERBOSITY = '3'
  else
    OUTPUT_VERBOSITY = ENV['OUTPUT_VERBOSITY']
  end
end

unless defined? STATIC_IP_KRBKDC 
  STATIC_IP_KRBKDC = "192.168.50.30"
end

unless defined? STATIC_IP_DATAVERSE 
  STATIC_IP_DATAVERSE = "192.168.50.20"
end

unless defined? STATIC_IP_CDH 
  STATIC_IP_CDH = "192.168.50.10"
end

unless defined? ZOOKEEPER_ENSEMBLE
  ZOOKEEPER_ENSEMBLE = "quickstart.cloudera:2181"
end

unless defined? ZOOKEEPER_KEYTAB_PATH
  ZOOKEEPER_KEYTAB_PATH = '/etc/zookeeper/conf/zookeeper.keytab'
end

unless defined? SOLR_VERSION
  SOLR_VERSION = '5.4.1'
end

unless defined? SOLR_INSTALL_DIR
  SOLR_INSTALL_DIR = '/opt'
end

unless defined? SOLR_KEYTAB_PATH
  SOLR_KEYTAB_PATH = '/var/solr/solr.keytab'
end

unless defined? ENABLE_TLS_ON_SOLR
  # Set this to non-zero to configure the solr service to use TLS/SSL
  if ENV['ENABLE_TLS_ON_SOLR'].nil?
    ENABLE_TLS_ON_SOLR = 0
  else
    ENABLE_TLS_ON_SOLR = ENV['ENABLE_TLS_ON_SOLR']
  end
end

unless defined? KEYSTORE_PATH
  KEYSTORE_PATH = '/etc/pki/java/dataverse_keystore.jks'
end

unless defined? KEYSTORE_PASSWORD
  KEYSTORE_PASSWORD = 'dataverse'
end

unless defined? TRUSTSTORE_PATH
  TRUSTSTORE_PATH = '/etc/pki/java/dataverse_truststore.jks'
end

unless defined? TRUSTSTORE_PASSWORD
  TRUSTSTORE_PASSWORD = 'dataverse'
end

unless defined? DVCOLLECTION_NAME
  DVCOLLECTION_NAME = 'dvcollection'
end

unless defined? DATAVERSE_HOME
  DATAVERSE_HOME = "/home/glassfish/glassfish4/glassfish/domains/domain1"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 1
  end

  config.vm.synced_folder "../../../", "/dataverse"
  config.vm.provision "killFirewall", type: "shell", inline: "service iptables stop"

  config.vm.define "krbkdc" do |krb|
    krb.vm.hostname = "krbkdc"
    krb.vm.box = "puppetlabs/centos-6.6-64-puppet"
    krb.vm.network "private_network", ip: STATIC_IP_KRBKDC
  
    krb.vm.provision "installKerberos", type: "shell", 
      path: "./install-krb5kdc.sh", args: "-i #{STATIC_IP_KRBKDC} -v #{OUTPUT_VERBOSITY}"
      
    krb.vm.provision "addDataversePrincipal", type: "shell",
      path: "./setup-krb-principal.sh", args: "-i #{STATIC_IP_DATAVERSE} -p 'dataverse' -v #{OUTPUT_VERBOSITY} -w 'password' "
    STATIC_IP_SOLRCLOUD.each_with_index { |node,index|
      krb.vm.provision "addSolrCloud" + (index + 1).to_s + "Principals", type: "shell", 
      path: "./setup-krb-principal.sh", args: "-i #{node} -p 'solr' -q 'HTTP' -r 'zookeeper' -v #{OUTPUT_VERBOSITY} -w 'password' "
      krb.vm.provision "makeZookeeperKeytabForSolrCloud" + (index + 1).to_s, type: "shell", 
      path: "./setup-krb-principal.sh", args: "-i #{node} -p 'zookeeper' -q 'HTTP' -v #{OUTPUT_VERBOSITY} -w 'password' -k"
    }
    
    krb.vm.provision "addDataverseUserPrincipal", type: "shell",
      inline: "kadmin.local -q \"addprinc -pw password dataverse_user\""
  end

  config.vm.define "cdh" do |cdh|
    cdh.vm.hostname = "quickstart.cloudera"
    cdh.vm.box = "UNCC-DSI/cloudera-quickstart"
    cdh.vm.box_version = "~> 5.4.0"
    cdh.vm.network "private_network", ip: STATIC_IP_CDH
    cdh.vm.graceful_halt_timeout = 180

    cdh.vm.provision "createDataverseCollection", type: "shell", 
          path: "../setup-dvcollection.sh", 
          args: "-c '#{DVCOLLECTION_NAME}' -v #{OUTPUT_VERBOSITY} -r 1 -s 1"
      
  end

  config.vm.define "dataverse", primary: true do |dataverse|
    dataverse.vm.hostname = "dataverse"
    dataverse.vm.box = "puppetlabs/centos-6.6-64-puppet"
    dataverse.vm.network "private_network", ip: STATIC_IP_DATAVERSE
    
    unless defined? mailserver
      mailserver = "localhost"
      if ENV['MAIL_SERVER'].nil?
        puts "MAIL_SERVER environment variable not specified. Using #{mailserver} by default.\nTo specify it in bash: export MAIL_SERVER=localhost"
      else
        mailserver = ENV['MAIL_SERVER']
        puts "MAIL_SERVER environment variable found, using #{mailserver}"
      end
    end

    dataverse.vm.provision "dataversePrereqs", type: "shell", 
      path: "../setup.sh", args: "-v #{OUTPUT_VERBOSITY}"

#    dataverse.vm.provision "installKerberos", type: "shell", 
#        path: "./install-krbGateway.sh", args:  [ "-k",STATIC_IP_KRBKDC,"-v",OUTPUT_VERBOSITY ]
#    dataverse.vm.provision "dataverseKeytab", type: "shell", 
#      inline: "cp /vagrant/dataverse-#{STATIC_IP_DATAVERSE}.keytab #{DATAVERSE_HOME}/config/dataverse.keytab; rm /vagrant/dataverse-#{STATIC_IP_DATAVERSE}.keytab; chown glassfish:glassfish #{DATAVERSE_HOME}/config/dataverse.keytab; chmod 0600 #{DATAVERSE_HOME}/config/dataverse.keytab"
#    dataverse.vm.provision "configureKerberos", type: "shell", 
#        path: "./setup-dv-jaas.sh", args:  [ "-c","#{DATAVERSE_HOME}/config/login.conf","-i",STATIC_IP_DATAVERSE,"-k","#{DATAVERSE_HOME}/config/dataverse.keytab","-p","dataverse","-v",OUTPUT_VERBOSITY ]
#    
#    if (ENABLE_TLS_ON_SOLR != 0)
#      dataverse.vm.provision "addGlassfishDomainTLS", type: "shell", 
#        path: "../setup-tls-dataverse.sh",
#        args: "-v #{OUTPUT_VERBOSITY} -w #{TRUSTSTORE_PASSWORD} -x #{STATIC_IP_DATAVERSE}" 
#      dataverse.vm.provision "addTrustToGlassfishDomain", type: "shell", 
#        inline: "keytool -importkeystore -noprompt -srckeystore /vagrant/dataverse_truststore.jks -srcstorepass #{KEYSTORE_PASSWORD} -destkeystore #{DATAVERSE_HOME}/config/cacerts.jks -deststorepass changeit"
#
#      STATIC_IP_SOLRCLOUD.each_with_index { |node,index|
#        dataverse.vm.provision "remoteAddTrustRestartSolrCloud" + (index + 1).to_s, type: "shell", 
#          inline: "ssh -o StrictHostKeyChecking=no -i /vagrant/.vagrant/machines/solrcloud" + (index + 1).to_s + "/virtualbox/private_key vagrant@#{node} 'sudo cp /vagrant/dataverse_truststore.jks #{TRUSTSTORE_PATH}; sudo service solr restart'"      
#      }
#
#      dataverse.vm.provision "cleanupTmpTrustore", type: "shell", inline: "rm /vagrant/dataverse_truststore.jks"
#    end
 
#    dataverse.vm.provision "cleanupTmpKrb5Conf", type: "shell", inline: "rm /vagrant/krb5.conf"

    dataverse.vm.provision "addHosts", type: "shell", inline: "echo \"#{STATIC_IP_CDH}     quickstart.cloudera     quickstart\" >> /etc/hosts"

    dataverse.vm.provision "dataverseSetup", type: "shell", path: "../install-dataverse.sh",
      args: "-c #{DVCOLLECTION_NAME} -h #{STATIC_IP_DATAVERSE} -m #{mailserver} -z '#{ZOOKEEPER_ENSEMBLE}' -u #{ENABLE_TLS_ON_SOLR} -v #{OUTPUT_VERBOSITY}"

#    dataverse.vm.provision "enableDataverseSolrJKerberos", type: "shell", 
#      path: "./enable-kerberos-onDataverse.sh", args:  [ "-v",OUTPUT_VERBOSITY,"-x",STATIC_IP_DATAVERSE ]


    dataverse.vm.provision "dvTestUsers", type: "shell", path: "../setup-dv-test_addUsers.sh"
    dataverse.vm.provision "dvTestPublishRoot", type: "shell", path: "../setup-dv-test_publishRoot.sh"
    dataverse.vm.provision "dvTestSetupUserDVs", type: "shell", path: "../setup-dv-test_setupUserDVs.sh"
  end

end
